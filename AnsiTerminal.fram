import /List

let cannonMode = (extern dbl_setCanMode : Unit ->[IO] Unit)
let rawMode    = (extern dbl_setRawMode : Unit ->[IO] Unit)
let unixRead   = (extern dbl_unixRead : Unit ->[IO] String)
let flush      = (extern dbl_flush : Unit ->[IO] Unit)

let esc = '\x1b'
let escStr = "\x1b"

let del = '\x7f'
let delStr = "\x7f"

let (csi : String) = escStr + "["

module Cursor
  pub let moveHome = csi + "H"

  pub let moveTo (line : Int) (col : Int) = 
    csi + line.toString + ";" + col.toString + "H"

  let move (n : Option Int) (dir : String) = 
    match n with 
    | None => csi + dir
    | Some n => 
     (assert (n > 0);
      csi + n.toString + dir)
    end

  pub let moveUp    {?n : Int} () = move n "A"
  pub let moveDown  {?n : Int} () = move n "B"
  pub let moveRight {?n : Int} () = move n "C"
  pub let moveLeft  {?n : Int} () = move n "D"

  pub let moveDownHome {?n : Int} () = move n "E"
  pub let moveUpHome   {?n : Int} () = move n "F"

  pub let moveToColumn {?n : Int} () = move n "G"

  pub let requestPosition = csi + "6n"
end

module Erase
  pub let eraseDisplay = csi + "J"

  pub let eraseEndScreen = csi + "0J"

  pub let eraseBegScreen = csi + "1J"

  pub let eraseScreen = csi + "2J"

  pub let eraseSavedLines = cis + "3J"
end

let isControl (str : String) = str.get 0 == esc

let enable_mouse () =
  printStr "\x1b[?1000h";  
  printStr "\x1b[?1006h"

let disable_mouse () =
  printStr "\x1b[?1000l";
  printStr "\x1b[?1006l"

pub method toString 
  { type X, method toString : X ->> String }
  (self : List X) =
  let rec iter (xs : List X) =
    match xs with
    | [] => "]"
    | [x] => x.toString + "]"
    | x :: xs => x.toString + ", " + iter xs
    end in
  "[" + iter self

let test () =
  disable_mouse ();
  rawMode ();
  # tenable_mouse ();
  let ch = unixRead () in
  printStr ch.toList.toString;
  cannonMode ()

let betterReadLine () =
  let rec iter (buffer : List Char) = 
    let ch = unixRead () in
    if ch == delStr then
      (printStr "\x08\x7f"; flush (); let ~onError _ = [] in iter buffer.tlErr)
    else if ch == "\n" then
      charListToStr buffer.rev
    else if isControl ch then
      iter buffer
    else
     (printStr ch;
      flush ();
      iter (ch.get 0 :: buffer)) in
  rawMode ();
  let str = iter [] in
  cannonMode ();
  printStrLn "";
  printStrLn str

# let _ = betterReadLine ()
